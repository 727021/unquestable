// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// #region User Data
model User {
  id            Int     @id @default(autoincrement())
  discordId     String  @unique
  displayName   String
  discriminator String
  email         String? @unique
  avatar        String?
}

// #endregion

// #region Static Game Data
enum SetType {
  CAMPAIGN
  HERO
  VILLAIN
}

model Expansion {
  id        Int          @id @default(autoincrement())
  type      SetType
  name      String
  classes   Class[]
  heroes    Hero[]
  items     Item[]
  agendas   AgendaDeck[]
  missions  Mission[]
  troops    Troop[]
  campaigns Campaign[]
  rewards   Reward[]

  dependsOn  Expansion[] @relation(name: "depend")
  dependedOn Expansion[] @relation(name: "depend")

  @@unique([name, type])
}

model ClassCard {
  id      Int     @id @default(autoincrement())
  name    String
  tagline String?
  cost    Int     @default(0)
  decks   Class[]
}

enum Side {
  REBEL
  IMPERIAL
  ALL
}

model Class {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  side        Side
  cards       ClassCard[]
  heroId      Int?        @unique
  hero        Hero?       @relation(fields: [heroId], references: [id])
  expansionId Int
  expansion   Expansion   @relation(fields: [expansionId], references: [id])
}

model Hero {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  tagline     String
  expansionId Int
  expansion   Expansion @relation(fields: [expansionId], references: [id])
  mission     Mission   @relation(fields: [missionId], references: [id])
  missionId   Int       @unique
  class       Class?
}

model Reward {
  id            Int             @id @default(autoincrement())
  name          String
  tagline       String?
  side          Side
  MissionReward MissionReward[]
  expansionId   Int
  expansion     Expansion       @relation(fields: [expansionId], references: [id])
}

model Item {
  id          Int       @id @default(autoincrement())
  name        String
  tagline     String?
  cost        Int
  tier        Int // 1,2,3
  expansionId Int
  expansion   Expansion @relation(fields: [expansionId], references: [id])

  @@index([name, tier])
}

model Agenda {
  id      Int            @id @default(autoincrement())
  name    String
  tagline String?
  cost    Int
  deckId  Int
  deck    AgendaDeck     @relation(fields: [deckId], references: [id])
  mission AgendaMission?
}

model AgendaDeck {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  agendas     Agenda[]
  expansionId Int
  expansion   Expansion @relation(fields: [expansionId], references: [id])
}

// If the rebels don't take an optional (unforced) imperial mission,
// the rebels lose that mission and the loss rewards are given out
model AgendaMission {
  agendaId  Int     @unique
  agenda    Agenda  @relation(fields: [agendaId], references: [id])
  missionId Int     @unique
  mission   Mission @relation(fields: [missionId], references: [id])
  // whether this is played as a forced mission
  forced    Boolean @default(false)

  @@id([agendaId, missionId])
}

enum MissionType {
  STORY
  // side missions on agenda cards
  IMPERIAL
  // rebel side missions
  RED
  GREEN
  GRAY
}

model Mission {
  id                 Int                 @id @default(autoincrement())
  agenda             AgendaMission?
  name               String
  type               MissionType
  // time range (some side missions)
  start              Int?
  end                Int?
  // hero missions (referenced in Hero model)
  hero               Hero?
  rewards            MissionReward[]
  prevRewards        MissionReward[]     @relation(name: "prev-next-mission")
  forcedBy           MissionReward[]     @relation(name: "forced-mission")
  startsCampaign     Campaign[]
  rewardPlaceholders RewardPlaceholder[]
  expansionId        Int
  expansion          Expansion           @relation(fields: [expansionId], references: [id])

  @@unique([name, expansionId])
}

enum MissionRewardType {
  WIN // rewards for a rebel win
  LOSS // rewards for an imperial win
  ALL // additional rewards
}

model RewardPlaceholder {
  id         Int               @id @default(autoincrement())
  name       String
  label      String
  // input type
  type       String
  // input validation options
  validation Json              @default("{}")
  missionId  Int
  mission    Mission           @relation(fields: [missionId], references: [id])
  campaignId Int
  campaign   Campaign          @relation(fields: [campaignId], references: [id])
  status     MissionRewardType
}

model MissionReward {
  id              Int               @id @default(autoincrement())
  type            MissionRewardType
  side            Side
  missionId       Int
  mission         Mission           @relation(fields: [missionId], references: [id])
  campaignId      Int
  campaign        Campaign          @relation(fields: [campaignId], references: [id])
  // JavaScript expression (with placeholders) that evaluates to a boolean
  // Determines whether this reward should be given
  condition       String?
  // JavaScript expression (with placeholders) that evaluates to a number
  // Multiplies all numeric rewards (xp, credits, influence)
  multiplier      String?
  xp              Int? // per player
  credits         Int? // per hero
  influence       Int?
  rewardId        Int?
  reward          Reward?           @relation(fields: [rewardId], references: [id])
  troopId         Int?
  troop           Troop?            @relation(fields: [troopId], references: [id])
  // for story missions
  nextMissionId   Int?
  nextMission     Mission?          @relation(fields: [nextMissionId], references: [id], name: "prev-next-mission")
  // for forced missions
  forcedMissionId Int?
  forcedMission   Mission?          @relation(fields: [forcedMissionId], references: [id], name: "forced-mission")

  @@unique([missionId, type, side])
}

model Troop {
  id            Int             @id @default(autoincrement())
  name          String
  unique        Boolean         @default(false)
  elite         Boolean         @default(false)
  deployment    Int
  reinforcement Int?
  size          Int             @default(1)
  traits        String[]
  expansionId   Int
  expansion     Expansion       @relation(fields: [expansionId], references: [id])
  MissionReward MissionReward[]
}

model Campaign {
  id                 Int                 @id @default(autoincrement())
  name               String
  period             Int
  startId            Int                 @unique
  startingMission    Mission             @relation(fields: [startId], references: [id])
  expansionId        Int
  expansion          Expansion           @relation(fields: [expansionId], references: [id])
  missionSlots       MissionSlot[]
  missionRewards     MissionReward[]
  rewardPlaceholders RewardPlaceholder[]
}

enum MissionSlotType {
  STORY
  SIDE
}

model MissionSlot {
  id         Int             @id @default(autoincrement())
  index      Int
  type       MissionSlotType
  threat     Int
  itemTiers  Int[]
  campaignId Int
  campaign   Campaign        @relation(fields: [campaignId], references: [id])
}

// #endregion

// #region User Game Data
// #endregion
